function [x y r success] = LM_iter(X, x0, y0, r0, mu)
% [x y r success] = LM_iter(X, x0, y0, r0, mu)
%
% makes the Levenberg-Marquardt iteration. 
%
% INPUT: 
% X: n-by-2 matrix
%    with data
% x0, y0 are the coordinates of the circle center.
% r0 is the circle radius
% mu is the damping factor (the factor which multiplies the
% regularizing identity matrix)

% OUTPUT: 
% success == 1 if the iteration is successful, i.e. 
% value of criterion f is decreased after the update 
% of x. 
% success == 0 in the oposite case. 
%
% x,y,r are updated parameters if success == 1. 
% x,y,r = x0,y0,r0 if success == 0.

x1 = x0-X(:,1);
y1 = y0-X(:,2);
s = sqrt(x1.^2 + y1.^2);

jac = [x1./s, y1./s, -ones(size(X(:,2)))];
g = dist(X,x0,y0,r0);
res = [x0 y0 r0] - g*(inv(jac'*jac + mu*eye(3)) * jac')';
f = get_objective_function(X);
z = get_objective_function(res);

if f([x0,y0,r0]) > z([x0,y0,r0])
    x = res(1);
    y = res(2);
    r = res(3);
    success = 1;
else
    x = res(1);
    y = res(2);
    r = res(3);
    success = 0;
end
 
